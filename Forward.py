# -*- coding: utf-8 -*-
"""HW2_Morua_0615.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G9sFfJi01S3d_oabSrvN71tAFmMwu4eM
"""

import numpy as np

def forwardAlgorithm(obs, a, b, pi):
    """
    :param obs: Observation Vector
    :param   a: Transition probability matrix
    :param   b: Output probability matrix
    :param  pi: Initial state probability vector
    :return: The Forward probability

    Instructions: Implement algorithm on slide 29 "The Forward Algorithm" of lecture note slides
    """
    # Tell Numpy how to print the array
    np.set_printoptions(formatter={'float': '{: 0.4f}'.format})

    # Initialization step
    print('\033[1m' + 'Initialization' + '\033[0m')

    # Initialize alpha to zero using numpy zeros function
    alpha=np.zeros((obs.shape[0], a.shape[0]))

    #set initial values
    alpha[0, :]= pi * b[:, obs[0]]
    print()
    print(alpha)
    print()

    # The Induction Step
    print('\033[1m' + 'Induction' + '\033[0m')
    for t in range(1, obs.shape[0]):
        for j in range(a.shape[0]):
            alphaSum=0.0
            for i in range(a.shape[0]):
                alphaSum += alpha[t-1,i] * a[i,j]

            alpha[t, j]= alphaSum*b[obs[t],j-1]
            print("alpha(", t+1, ",", j+1, ")")

            print(alpha)
            print()

    # The Termination Step
    print('\033[1m' + 'Termination' + '\033[0m')
    forwardProb=0
    forwardProb= alpha[2,0] + alpha[2,1]
    return forwardProb

def main():
    # Observations
    # Note that 0 == H and 1 == T
    observationVector=np.array((1,1,0,0))

    # Transition Probabilities
    transitionProbMat=np.array(((0.4, 0.5, 0.1), (0.34, 0.16, 0.5),(0.15,0.4,0.55)))

    # Output Probabilities
    outputProbMat=np.array(((.65,.35), (.85,.15),(.75,.25)))

    # Initial state probability probability vector
    InitialStateProbVec=np.array((0.45, 0.25, 0.3))

    # Invoke the Forward algorithm
    forwardProb=forwardAlgorithm(observationVector, transitionProbMat, outputProbMat, InitialStateProbVec)

    print(f'P(O|\u03BB)={forwardProb:1.4f}')

if __name__ == "__main__":
    main()